/**
 * @packageDocumentation
 * @module api.functional.sellers.authenticate.password
 */
//================================================================
import { AesPkcs5 } from "./../../../../__internal/AesPkcs5";
import { Fetcher } from "./../../../../__internal/Fetcher";
import { Primitive } from "./../../../../Primitive";
import type { IConnection } from "./../../../../IConnection";

import type { ISeller } from "./../../../../structures/actors/ISeller";


/**
 * Change password.
 * 
 * @param [object Object]
 * @param [object Object],[object Object],[object Object]
 * @return [object Object]
 * 
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 * @controller SellerAuthenticateController.change()
 * @path PATCH /sellers/authenticate/password/change
 */
export function change(connection: IConnection, input: Primitive<change.Input>): Promise<void>
{
    return Fetcher.fetch
    (
        connection,
        {"input_encrypted":true,"output_encrypted":false},
        "PATCH",
        `/sellers/authenticate/password/change`,
        input
    );
}
export namespace change
{
    export type Input = Primitive<ISeller.IChangePassword>;
}



//---------------------------------------------------------
// TO PREVENT THE UNUSED VARIABLE ERROR
//---------------------------------------------------------
AesPkcs5;
Fetcher;
Primitive;
