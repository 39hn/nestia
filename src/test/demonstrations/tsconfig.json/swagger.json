{
  "openapi": "3.0",
  "info": {
    "version": "0.1.0",
    "title": "Generated by nestia - https://github.com/samchon/nestia"
  },
  "paths": {
    "/consumers/{section}/sales/{saleId}/comments/{articleId}": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "section",
            "in": "path",
            "description": "Code of the target section",
            "schema": {
              "type": "string",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "saleId",
            "in": "path",
            "description": "ID of the target sale",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "articleId",
            "in": "path",
            "description": "ID of the target article",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "input",
            "in": "query",
            "description": "Information about pagination and searching",
            "schema": {
              "$ref": "#/components/schemas/IPage.IRequest-lt-string-gt-"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Page of the comments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPage-lt-ISaleComment-gt-"
                }
              }
            }
          },
          "400": {
            "description": "bad request error when type of the input data is not valid"
          },
          "404": {
            "description": "not found error when unable to find the matched record"
          }
        },
        "description": "Get page of comments.\n\nGet list of the {@link ISaleComment comments} with {@link IPage pagination}."
      },
      "post": {
        "tags": [],
        "parameters": [
          {
            "name": "section",
            "in": "path",
            "description": "Code of the target section",
            "schema": {
              "type": "string",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "saleId",
            "in": "path",
            "description": "ID of the target sale",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "articleId",
            "in": "path",
            "description": "ID of the target article",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Content to write",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISaleComment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly archived comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISaleComment"
                }
              }
            }
          },
          "400": {
            "description": "bad request error when type of the input data is not valid"
          },
          "401": {
            "description": "unauthorized error when you've not logged in yet"
          },
          "403": {
            "description": "forbidden error when you're a seller and the sale is not yours"
          },
          "404": {
            "description": "not found error when unable to find the matched record"
          }
        },
        "description": "Store a new comment."
      }
    },
    "/consumers/{section}/sales/{saleId}/comments/{articleId}/{commentId}": {
      "delete": {
        "tags": [],
        "parameters": [
          {
            "name": "section",
            "in": "path",
            "description": "Code of the target section",
            "schema": {
              "type": "string",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "saleId",
            "in": "path",
            "description": "ID of the target sale",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "articleId",
            "in": "path",
            "description": "ID of the target article",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "ID of the target comment to be erased",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Empty object"
          },
          "401": {
            "description": "unauthorized error when you've not logged in yet"
          },
          "403": {
            "description": "forbidden error when the comment is not yours"
          },
          "404": {
            "description": "not found error when unable to find the matched record"
          }
        },
        "description": "Remove a comment."
      }
    },
    "/consumers/{section}/sales/{saleId}/entire": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "section",
            "in": "path",
            "description": "",
            "schema": {
              "type": "string",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "saleId",
            "in": "path",
            "description": "",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "input",
            "in": "query",
            "description": "",
            "schema": {
              "$ref": "#/components/schemas/IPage.IRequest-lt-string-gt-"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPage-lt-ISaleEntireArtcle.ISummary-gt-"
                }
              }
            }
          }
        },
        "description": ""
      }
    },
    "/consumers/{section}/sales/{saleId}/entire/{id}": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "section",
            "in": "path",
            "description": "",
            "schema": {
              "type": "string",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "saleId",
            "in": "path",
            "description": "",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ISaleInquiry-lt-ISaleArticle.IContent-gt-"
                    },
                    {
                      "$ref": "#/components/schemas/ISaleInquiry-lt-ISaleReview.IContent-gt-"
                    }
                  ]
                }
              }
            }
          }
        },
        "description": ""
      }
    },
    "/consumers/{section}/sales/{saleId}/questions": {
      "post": {
        "tags": [],
        "parameters": [
          {
            "name": "section",
            "in": "path",
            "description": "Code of the target section",
            "schema": {
              "type": "string",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "saleId",
            "in": "path",
            "description": "ID of the target sale",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Content to archive",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISaleInquiry-lt-Content-gt-"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly archived inquiry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISaleInquiry-lt-Content-gt-"
                }
              }
            }
          },
          "400": {
            "description": "bad request error when type of the input data is not valid"
          },
          "401": {
            "description": "unauthorized error when you've not logged in yet"
          }
        },
        "description": "Store a new inquiry."
      },
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "section",
            "in": "path",
            "description": "Code of the target section",
            "schema": {
              "type": "string",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "saleId",
            "in": "path",
            "description": "ID of the target sale",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "input",
            "in": "query",
            "description": "Information about pagination and searching",
            "schema": {},
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Page of the inquiries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPage-lt-Summary-gt-"
                }
              }
            }
          },
          "400": {
            "description": "bad request error when type of the input data is not valid"
          },
          "404": {
            "description": "not found error when unable to find the matched record"
          }
        },
        "description": "Get page of summarized inquiries."
      }
    },
    "/consumers/{section}/sales/{saleId}/questions/{id}": {
      "post": {
        "tags": [],
        "parameters": [
          {
            "name": "section",
            "in": "path",
            "description": "Code of the target section",
            "schema": {
              "type": "string",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "saleId",
            "in": "path",
            "description": "ID of the target sale",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the target article to be updated",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "New content to be overwritten",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISaleInquiry-lt-Content-gt-"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The inquiry record after the update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISaleInquiry-lt-Content-gt-"
                }
              }
            }
          },
          "400": {
            "description": "bad request error when type of the input data is not valid"
          },
          "401": {
            "description": "unauthorized error when you've not logged in yet"
          },
          "403": {
            "description": "forbidden error when the article is not yours"
          }
        },
        "description": "Update an inquiry."
      },
      "delete": {
        "tags": [],
        "parameters": [
          {
            "name": "section",
            "in": "path",
            "description": "Code of the target section",
            "schema": {
              "type": "string",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "saleId",
            "in": "path",
            "description": "ID of the target sale",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the target article to be erased",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Empty object"
          },
          "400": {
            "description": "bad request error when type of the input data is not valid"
          },
          "401": {
            "description": "unauthorized error when you've not logged in yet"
          },
          "403": {
            "description": "forbidden error when the article is not yours"
          }
        },
        "description": "Remove an inquiry."
      },
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "section",
            "in": "path",
            "description": "Code of the target section",
            "schema": {
              "type": "string",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "saleId",
            "in": "path",
            "description": "ID of the target sale",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Target inquiry",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed record of the inquiry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISaleInquiry-lt-Content-gt-.o1"
                }
              }
            }
          },
          "400": {
            "description": "bad request error when type of the input data is not valid"
          },
          "404": {
            "description": "not found error when unable to find the matched record"
          }
        },
        "description": "Get detailed record of an inquiry"
      }
    },
    "/consumers/{section}/sales/{saleId}/reviews": {
      "post": {
        "tags": [],
        "parameters": [
          {
            "name": "section",
            "in": "path",
            "description": "Code of the target section",
            "schema": {
              "type": "string",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "saleId",
            "in": "path",
            "description": "ID of the target sale",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Content to archive",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISaleInquiry-lt-Content-gt-"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly archived inquiry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISaleInquiry-lt-Content-gt-"
                }
              }
            }
          },
          "400": {
            "description": "bad request error when type of the input data is not valid"
          },
          "401": {
            "description": "unauthorized error when you've not logged in yet"
          }
        },
        "description": "Store a new inquiry."
      },
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "section",
            "in": "path",
            "description": "Code of the target section",
            "schema": {
              "type": "string",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "saleId",
            "in": "path",
            "description": "ID of the target sale",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "input",
            "in": "query",
            "description": "Information about pagination and searching",
            "schema": {},
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Page of the inquiries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPage-lt-Summary-gt-"
                }
              }
            }
          },
          "400": {
            "description": "bad request error when type of the input data is not valid"
          },
          "404": {
            "description": "not found error when unable to find the matched record"
          }
        },
        "description": "Get page of summarized inquiries."
      }
    },
    "/consumers/{section}/sales/{saleId}/reviews/{id}": {
      "post": {
        "tags": [],
        "parameters": [
          {
            "name": "section",
            "in": "path",
            "description": "Code of the target section",
            "schema": {
              "type": "string",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "saleId",
            "in": "path",
            "description": "ID of the target sale",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the target article to be updated",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "New content to be overwritten",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISaleInquiry-lt-Content-gt-"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The inquiry record after the update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISaleInquiry-lt-Content-gt-"
                }
              }
            }
          },
          "400": {
            "description": "bad request error when type of the input data is not valid"
          },
          "401": {
            "description": "unauthorized error when you've not logged in yet"
          },
          "403": {
            "description": "forbidden error when the article is not yours"
          }
        },
        "description": "Update an inquiry."
      },
      "delete": {
        "tags": [],
        "parameters": [
          {
            "name": "section",
            "in": "path",
            "description": "Code of the target section",
            "schema": {
              "type": "string",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "saleId",
            "in": "path",
            "description": "ID of the target sale",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the target article to be erased",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Empty object"
          },
          "400": {
            "description": "bad request error when type of the input data is not valid"
          },
          "401": {
            "description": "unauthorized error when you've not logged in yet"
          },
          "403": {
            "description": "forbidden error when the article is not yours"
          }
        },
        "description": "Remove an inquiry."
      },
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "section",
            "in": "path",
            "description": "Code of the target section",
            "schema": {
              "type": "string",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "saleId",
            "in": "path",
            "description": "ID of the target sale",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Target inquiry",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed record of the inquiry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISaleInquiry-lt-Content-gt-.o1"
                }
              }
            }
          },
          "400": {
            "description": "bad request error when type of the input data is not valid"
          },
          "404": {
            "description": "not found error when unable to find the matched record"
          }
        },
        "description": "Get detailed record of an inquiry"
      }
    },
    "/misc/health-check": {
      "get": {
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "description": ""
      }
    },
    "/misc/health-check/sleep-for/{ms}": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "ms",
            "in": "path",
            "description": "",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "description": ""
      }
    },
    "/performance": {
      "get": {
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Performance information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPerformance"
                }
              }
            }
          }
        },
        "description": "Get performance information of the server."
      }
    },
    "/sellers/{section}/sales/{saleId}/comments/{articleId}": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "section",
            "in": "path",
            "description": "Code of the target section",
            "schema": {
              "type": "string",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "saleId",
            "in": "path",
            "description": "ID of the target sale",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "articleId",
            "in": "path",
            "description": "ID of the target article",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "input",
            "in": "query",
            "description": "Information about pagination and searching",
            "schema": {
              "$ref": "#/components/schemas/IPage.IRequest-lt-string-gt-"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Page of the comments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPage-lt-ISaleComment-gt-"
                }
              }
            }
          },
          "400": {
            "description": "bad request error when type of the input data is not valid"
          },
          "404": {
            "description": "not found error when unable to find the matched record"
          }
        },
        "description": "Get page of comments.\n\nGet list of the {@link ISaleComment comments} with {@link IPage pagination}."
      },
      "post": {
        "tags": [],
        "parameters": [
          {
            "name": "section",
            "in": "path",
            "description": "Code of the target section",
            "schema": {
              "type": "string",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "saleId",
            "in": "path",
            "description": "ID of the target sale",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "articleId",
            "in": "path",
            "description": "ID of the target article",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Content to write",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISaleComment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly archived comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISaleComment"
                }
              }
            }
          },
          "400": {
            "description": "bad request error when type of the input data is not valid"
          },
          "401": {
            "description": "unauthorized error when you've not logged in yet"
          },
          "403": {
            "description": "forbidden error when you're a seller and the sale is not yours"
          },
          "404": {
            "description": "not found error when unable to find the matched record"
          }
        },
        "description": "Store a new comment."
      }
    },
    "/sellers/{section}/sales/{saleId}/comments/{articleId}/{commentId}": {
      "delete": {
        "tags": [],
        "parameters": [
          {
            "name": "section",
            "in": "path",
            "description": "Code of the target section",
            "schema": {
              "type": "string",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "saleId",
            "in": "path",
            "description": "ID of the target sale",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "articleId",
            "in": "path",
            "description": "ID of the target article",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "ID of the target comment to be erased",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Empty object"
          },
          "401": {
            "description": "unauthorized error when you've not logged in yet"
          },
          "403": {
            "description": "forbidden error when the comment is not yours"
          },
          "404": {
            "description": "not found error when unable to find the matched record"
          }
        },
        "description": "Remove a comment."
      }
    },
    "/sellers/{section}/sales/{saleId}/entire": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "section",
            "in": "path",
            "description": "",
            "schema": {
              "type": "string",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "saleId",
            "in": "path",
            "description": "",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "input",
            "in": "query",
            "description": "",
            "schema": {
              "$ref": "#/components/schemas/IPage.IRequest-lt-string-gt-"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPage-lt-ISaleEntireArtcle.ISummary-gt-"
                }
              }
            }
          }
        },
        "description": ""
      }
    },
    "/sellers/{section}/sales/{saleId}/entire/{id}": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "section",
            "in": "path",
            "description": "",
            "schema": {
              "type": "string",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "saleId",
            "in": "path",
            "description": "",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ISaleInquiry-lt-ISaleArticle.IContent-gt-"
                    },
                    {
                      "$ref": "#/components/schemas/ISaleInquiry-lt-ISaleReview.IContent-gt-"
                    }
                  ]
                }
              }
            }
          }
        },
        "description": ""
      }
    },
    "/sellers/{section}/sales/{saleId}/questions/{inquiryId}": {
      "post": {
        "tags": [],
        "parameters": [
          {
            "name": "section",
            "in": "path",
            "description": "Code of the target section",
            "schema": {
              "type": "string",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "saleId",
            "in": "path",
            "description": "ID of the target sale",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "inquiryId",
            "in": "path",
            "description": "ID of the target inquiry to be updated",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "New content to be overwritten",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISaleInquiry-lt-Content-gt-.o2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The inquiry record after the update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISaleInquiry-lt-Content-gt-.o2"
                }
              }
            }
          }
        },
        "description": "Update an answer."
      },
      "delete": {
        "tags": [],
        "parameters": [
          {
            "name": "section",
            "in": "path",
            "description": "Code of the target section",
            "schema": {
              "type": "string",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "saleId",
            "in": "path",
            "description": "ID of the target sale",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "inquiryId",
            "in": "path",
            "description": "ID of the target inquiry that the answer would be erased",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Empty object"
          }
        },
        "description": "Remove an answer."
      }
    },
    "/sellers/{section}/sales/{saleId}/questions": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "section",
            "in": "path",
            "description": "Code of the target section",
            "schema": {
              "type": "string",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "saleId",
            "in": "path",
            "description": "ID of the target sale",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "input",
            "in": "query",
            "description": "Information about pagination and searching",
            "schema": {},
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Page of the inquiries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPage-lt-Summary-gt-"
                }
              }
            }
          },
          "400": {
            "description": "bad request error when type of the input data is not valid"
          },
          "404": {
            "description": "not found error when unable to find the matched record"
          }
        },
        "description": "Get page of summarized inquiries."
      }
    },
    "/sellers/{section}/sales/{saleId}/questions/{id}": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "section",
            "in": "path",
            "description": "Code of the target section",
            "schema": {
              "type": "string",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "saleId",
            "in": "path",
            "description": "ID of the target sale",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Target inquiry",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed record of the inquiry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISaleInquiry-lt-Content-gt-.o1"
                }
              }
            }
          },
          "400": {
            "description": "bad request error when type of the input data is not valid"
          },
          "404": {
            "description": "not found error when unable to find the matched record"
          }
        },
        "description": "Get detailed record of an inquiry"
      }
    },
    "/sellers/{section}/sales/{saleId}/reviews/{inquiryId}": {
      "post": {
        "tags": [],
        "parameters": [
          {
            "name": "section",
            "in": "path",
            "description": "Code of the target section",
            "schema": {
              "type": "string",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "saleId",
            "in": "path",
            "description": "ID of the target sale",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "inquiryId",
            "in": "path",
            "description": "ID of the target inquiry to be updated",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "New content to be overwritten",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISaleInquiry-lt-Content-gt-.o2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The inquiry record after the update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISaleInquiry-lt-Content-gt-.o2"
                }
              }
            }
          }
        },
        "description": "Update an answer."
      },
      "delete": {
        "tags": [],
        "parameters": [
          {
            "name": "section",
            "in": "path",
            "description": "Code of the target section",
            "schema": {
              "type": "string",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "saleId",
            "in": "path",
            "description": "ID of the target sale",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "inquiryId",
            "in": "path",
            "description": "ID of the target inquiry that the answer would be erased",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Empty object"
          }
        },
        "description": "Remove an answer."
      }
    },
    "/sellers/{section}/sales/{saleId}/reviews": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "section",
            "in": "path",
            "description": "Code of the target section",
            "schema": {
              "type": "string",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "saleId",
            "in": "path",
            "description": "ID of the target sale",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "input",
            "in": "query",
            "description": "Information about pagination and searching",
            "schema": {},
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Page of the inquiries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPage-lt-Summary-gt-"
                }
              }
            }
          },
          "400": {
            "description": "bad request error when type of the input data is not valid"
          },
          "404": {
            "description": "not found error when unable to find the matched record"
          }
        },
        "description": "Get page of summarized inquiries."
      }
    },
    "/sellers/{section}/sales/{saleId}/reviews/{id}": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "section",
            "in": "path",
            "description": "Code of the target section",
            "schema": {
              "type": "string",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "saleId",
            "in": "path",
            "description": "ID of the target sale",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Target inquiry",
            "schema": {
              "type": "number",
              "nullable": false
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed record of the inquiry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISaleInquiry-lt-Content-gt-.o1"
                }
              }
            }
          },
          "400": {
            "description": "bad request error when type of the input data is not valid"
          },
          "404": {
            "description": "not found error when unable to find the matched record"
          }
        },
        "description": "Get detailed record of an inquiry"
      }
    },
    "/sellers/authenticate/join": {
      "post": {
        "tags": [],
        "parameters": [],
        "requestBody": {
          "description": "Information of yours",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISeller"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Information of newly joined seller",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISeller"
                }
              }
            }
          }
        },
        "description": "Join as a seller."
      }
    },
    "/sellers/authenticate/login": {
      "post": {
        "tags": [],
        "parameters": [],
        "requestBody": {
          "description": "Email and password",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISeller"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Information of the seller",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISeller"
                }
              }
            }
          }
        },
        "description": "Log-in as a seller."
      }
    },
    "/sellers/authenticate/password/change": {
      "patch": {
        "tags": [],
        "parameters": [],
        "requestBody": {
          "description": "Old and new passwords",
          "content": {
            "application/json": {
              "schema": {}
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Empty object"
          }
        },
        "description": "Change password."
      }
    },
    "/sellers/authenticate/exit": {
      "delete": {
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "description": ""
      }
    }
  },
  "components": {
    "schemas": {
      "IPage.IRequest-lt-string-gt-": {
        "type": "object",
        "properties": {
          "page": {
            "description": "페이지 번호",
            "type": "number",
            "nullable": false
          },
          "limit": {
            "description": "각 페이지 당 레코드 수 제한",
            "type": "number",
            "nullable": false
          },
          "search_fields": {
            "description": "검색 필드",
            "type": "array",
            "items": {
              "type": "string",
              "nullable": false
            },
            "nullable": false
          },
          "search_value": {
            "description": "검색 값",
            "type": "string",
            "nullable": false
          },
          "sort": {
            "description": "정렬 기준, 필드명을 부호와 함께 입력하면 됨\n\n  - 단순 필드명 입력 (`id`): 오름차순\n  - 양부호 사용 (`+id`): 오름차순\n  - 음부호 사용 (`-id`): 내림차순",
            "type": "string",
            "nullable": false
          }
        },
        "nullable": false,
        "required": [],
        "description": "페이지 요청정보"
      },
      "IPage-lt-ISaleComment-gt-": {
        "type": "object",
        "properties": {
          "pagination": {
            "description": "페이지 정보",
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "description": "레코드 리스트",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISaleComment"
            },
            "nullable": false
          }
        },
        "nullable": false,
        "required": [
          "pagination",
          "data"
        ],
        "description": "페이지 처리된 레코드 셋."
      },
      "IPage.IPagination": {
        "type": "object",
        "properties": {
          "page": {
            "description": "현재의 페이지 번호",
            "type": "number",
            "nullable": false
          },
          "limit": {
            "description": "개별 페이지 당 레코드 수 제한",
            "type": "number",
            "nullable": false
          },
          "total_count": {
            "description": "전체 레코드 수",
            "type": "number",
            "nullable": false
          },
          "total_pages": {
            "description": "전체 페이지 수",
            "type": "number",
            "nullable": false
          }
        },
        "nullable": false,
        "required": [
          "page",
          "limit",
          "total_count",
          "total_pages"
        ],
        "description": "페이지 정보"
      },
      "ISaleComment": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Primary Key.",
            "type": "number",
            "nullable": false
          },
          "writer_type": {
            "description": "Type of the writer.",
            "type": "string",
            "nullable": false
          },
          "writer_name": {
            "description": "Name of the writer.",
            "type": "string",
            "nullable": false
          },
          "contents": {
            "description": "Contents of the comments.\n\nWhen the comment writer tries to modify content, it would not modify the comment\ncontent but would be accumulated. Therefore, all of the people can read how\nthe content has been changed.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISaleComment.IContent"
            },
            "nullable": false
          },
          "created_at": {
            "description": "Creation time.",
            "type": "string",
            "nullable": false
          }
        },
        "nullable": false,
        "required": [
          "id",
          "writer_type",
          "writer_name",
          "contents",
          "created_at"
        ],
        "description": "Comment wrote on an article."
      },
      "ISaleComment.IContent": {
        "type": "object",
        "properties": {
          "created_at": {
            "description": "Creation time.",
            "type": "string",
            "nullable": false
          },
          "body": {
            "description": "Body of the content.",
            "type": "string",
            "nullable": false
          }
        },
        "nullable": false,
        "required": [
          "created_at",
          "body"
        ],
        "description": "Content info."
      },
      "IPage-lt-ISaleEntireArtcle.ISummary-gt-": {
        "type": "object",
        "properties": {
          "pagination": {
            "description": "페이지 정보",
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "description": "레코드 리스트",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ISaleInquiry.ISummary"
                },
                {
                  "$ref": "#/components/schemas/ISaleReview.ISummary"
                }
              ]
            },
            "nullable": false
          }
        },
        "nullable": false,
        "required": [
          "pagination",
          "data"
        ],
        "description": "페이지 처리된 레코드 셋."
      },
      "ISaleInquiry.ISummary": {
        "type": "object",
        "properties": {
          "writer": {
            "description": "Name of the writer.",
            "type": "string",
            "nullable": false
          },
          "answered": {
            "description": "Password of the inquiry article.",
            "type": "boolean",
            "nullable": false
          },
          "id": {
            "description": "Primary Key.",
            "type": "number",
            "nullable": false
          },
          "title": {
            "description": "Title of the article.",
            "type": "string",
            "nullable": false
          },
          "hit": {
            "description": "Hit count.\n\nHow many consumers had read.",
            "type": "number",
            "nullable": false
          },
          "created_at": {
            "description": "Creaiton time.",
            "type": "string",
            "nullable": false
          },
          "updated_at": {
            "description": "Updated time.",
            "type": "string",
            "nullable": false
          }
        },
        "nullable": false,
        "required": [
          "writer",
          "answered",
          "id",
          "title",
          "hit",
          "created_at",
          "updated_at"
        ],
        "description": "Summarized info of the inquiry article."
      },
      "ISaleReview.ISummary": {
        "type": "object",
        "properties": {
          "score": {
            "description": "Estimation score.",
            "type": "number",
            "nullable": false
          },
          "writer": {
            "description": "Name of the writer.",
            "type": "string",
            "nullable": false
          },
          "answered": {
            "description": "Password of the inquiry article.",
            "type": "boolean",
            "nullable": false
          },
          "id": {
            "description": "Primary Key.",
            "type": "number",
            "nullable": false
          },
          "title": {
            "description": "Title of the article.",
            "type": "string",
            "nullable": false
          },
          "hit": {
            "description": "Hit count.\n\nHow many consumers had read.",
            "type": "number",
            "nullable": false
          },
          "created_at": {
            "description": "Creaiton time.",
            "type": "string",
            "nullable": false
          },
          "updated_at": {
            "description": "Updated time.",
            "type": "string",
            "nullable": false
          }
        },
        "nullable": false,
        "required": [
          "score",
          "writer",
          "answered",
          "id",
          "title",
          "hit",
          "created_at",
          "updated_at"
        ],
        "description": "Summarized info of the review."
      },
      "ISaleInquiry-lt-ISaleArticle.IContent-gt-": {
        "type": "object",
        "properties": {
          "writer": {
            "description": "Name of the writer.",
            "type": "string",
            "nullable": false
          },
          "answer": {
            "description": "Formal answer from the seller.",
            "$ref": "#/components/schemas/ISaleArticle-lt-ISaleArticle.IContent-gt-"
          },
          "id": {
            "description": "Primary Key.",
            "type": "number",
            "nullable": false
          },
          "hit": {
            "description": "Hit count.\n\nHow many consumers had read.",
            "type": "number",
            "nullable": false
          },
          "contents": {
            "description": "List of contents.\n\nWhen the article writer tries to modify content, it would not modify the article\ncontent but would be accumulated. Therefore, all of the people can read how\nthe content has been changed.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISaleArticle.IContent"
            },
            "nullable": false
          },
          "created_at": {
            "description": "Creation time.",
            "type": "string",
            "nullable": false
          }
        },
        "nullable": false,
        "required": [
          "writer",
          "answer",
          "id",
          "hit",
          "contents",
          "created_at"
        ],
        "description": "Inquiry article.\n\nSub-type of article and super-type of question and answer."
      },
      "ISaleArticle-lt-ISaleArticle.IContent-gt-": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Primary Key.",
            "type": "number",
            "nullable": false
          },
          "hit": {
            "description": "Hit count.\n\nHow many consumers had read.",
            "type": "number",
            "nullable": false
          },
          "contents": {
            "description": "List of contents.\n\nWhen the article writer tries to modify content, it would not modify the article\ncontent but would be accumulated. Therefore, all of the people can read how\nthe content has been changed.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISaleArticle.IContent"
            },
            "nullable": false
          },
          "created_at": {
            "description": "Creation time.",
            "type": "string",
            "nullable": false
          }
        },
        "nullable": false,
        "required": [
          "id",
          "hit",
          "contents",
          "created_at"
        ],
        "description": "Article about a sale.\n\nThe `ISaleArticle` is a super type interface. Many sub-type articles would be\ndesigned by extending this super type interface `ISaleArticle`."
      },
      "ISaleArticle.IContent": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Primary key.",
            "type": "number",
            "nullable": false
          },
          "created_at": {
            "description": "Creation time.",
            "type": "string",
            "nullable": false
          },
          "title": {
            "description": "Title of the content/",
            "type": "string",
            "nullable": false
          },
          "body": {
            "description": "Body of the content.",
            "type": "string",
            "nullable": false
          },
          "files": {
            "description": "Attached files.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/__type"
            },
            "nullable": false
          }
        },
        "nullable": false,
        "required": [
          "id",
          "created_at",
          "title",
          "body",
          "files"
        ],
        "description": "Content info."
      },
      "__type": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the file.",
            "type": "string",
            "nullable": false
          },
          "extension": {
            "description": "Extension of the file, but ommitable.",
            "type": "string",
            "nullable": false
          },
          "url": {
            "description": "Full URL path of the file.",
            "type": "string",
            "nullable": false
          }
        },
        "nullable": false,
        "required": [
          "name",
          "extension",
          "url"
        ],
        "description": ""
      },
      "ISaleInquiry-lt-ISaleReview.IContent-gt-": {
        "type": "object",
        "properties": {
          "writer": {
            "description": "Name of the writer.",
            "type": "string",
            "nullable": false
          },
          "answer": {
            "description": "Formal answer from the seller.",
            "$ref": "#/components/schemas/ISaleArticle-lt-ISaleArticle.IContent-gt-"
          },
          "id": {
            "description": "Primary Key.",
            "type": "number",
            "nullable": false
          },
          "hit": {
            "description": "Hit count.\n\nHow many consumers had read.",
            "type": "number",
            "nullable": false
          },
          "contents": {
            "description": "List of contents.\n\nWhen the article writer tries to modify content, it would not modify the article\ncontent but would be accumulated. Therefore, all of the people can read how\nthe content has been changed.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISaleReview.IContent"
            },
            "nullable": false
          },
          "created_at": {
            "description": "Creation time.",
            "type": "string",
            "nullable": false
          }
        },
        "nullable": false,
        "required": [
          "writer",
          "answer",
          "id",
          "hit",
          "contents",
          "created_at"
        ],
        "description": "Inquiry article.\n\nSub-type of article and super-type of question and answer."
      },
      "ISaleReview.IContent": {
        "type": "object",
        "properties": {
          "score": {
            "description": "Estimation score.",
            "type": "number",
            "nullable": false
          },
          "id": {
            "description": "Primary key.",
            "type": "number",
            "nullable": false
          },
          "created_at": {
            "description": "Creation time.",
            "type": "string",
            "nullable": false
          },
          "title": {
            "description": "Title of the content/",
            "type": "string",
            "nullable": false
          },
          "body": {
            "description": "Body of the content.",
            "type": "string",
            "nullable": false
          },
          "files": {
            "description": "Attached files.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/__type"
            },
            "nullable": false
          }
        },
        "nullable": false,
        "required": [
          "score",
          "id",
          "created_at",
          "title",
          "body",
          "files"
        ],
        "description": "Content info of the review."
      },
      "ISaleInquiry-lt-Content-gt-": {
        "type": "object",
        "properties": {
          "writer": {
            "description": "Name of the writer.",
            "type": "string",
            "nullable": false
          },
          "answer": {
            "description": "Formal answer from the seller.",
            "$ref": "#/components/schemas/ISaleArticle-lt-ISaleArticle.IContent-gt-"
          },
          "id": {
            "description": "Primary Key.",
            "type": "number",
            "nullable": false
          },
          "hit": {
            "description": "Hit count.\n\nHow many consumers had read.",
            "type": "number",
            "nullable": false
          },
          "contents": {
            "description": "List of contents.\n\nWhen the article writer tries to modify content, it would not modify the article\ncontent but would be accumulated. Therefore, all of the people can read how\nthe content has been changed.",
            "type": "array",
            "items": {},
            "nullable": false
          },
          "created_at": {
            "description": "Creation time.",
            "type": "string",
            "nullable": false
          }
        },
        "nullable": false,
        "required": [
          "writer",
          "answer",
          "id",
          "hit",
          "contents",
          "created_at"
        ],
        "description": "Inquiry article.\n\nSub-type of article and super-type of question and answer."
      },
      "IPage-lt-Summary-gt-": {
        "type": "object",
        "properties": {
          "pagination": {
            "description": "페이지 정보",
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "description": "레코드 리스트",
            "type": "array",
            "items": {},
            "nullable": false
          }
        },
        "nullable": false,
        "required": [
          "pagination",
          "data"
        ],
        "description": "페이지 처리된 레코드 셋."
      },
      "ISaleInquiry-lt-Content-gt-.o1": {
        "type": "object",
        "properties": {
          "writer": {
            "description": "Name of the writer.",
            "type": "string",
            "nullable": false
          },
          "answer": {
            "description": "Formal answer from the seller.",
            "$ref": "#/components/schemas/ISaleArticle-lt-ISaleArticle.IContent-gt-"
          },
          "id": {
            "description": "Primary Key.",
            "type": "number",
            "nullable": false
          },
          "hit": {
            "description": "Hit count.\n\nHow many consumers had read.",
            "type": "number",
            "nullable": false
          },
          "contents": {
            "description": "List of contents.\n\nWhen the article writer tries to modify content, it would not modify the article\ncontent but would be accumulated. Therefore, all of the people can read how\nthe content has been changed.",
            "type": "array",
            "items": {},
            "nullable": false
          },
          "created_at": {
            "description": "Creation time.",
            "type": "string",
            "nullable": false
          }
        },
        "nullable": false,
        "required": [
          "writer",
          "answer",
          "id",
          "hit",
          "contents",
          "created_at"
        ],
        "description": "Inquiry article.\n\nSub-type of article and super-type of question and answer."
      },
      "IPerformance": {
        "type": "object",
        "properties": {
          "cpu": {
            "description": "CPU usage info.",
            "$ref": "#/components/schemas/process.global.NodeJS.CpuUsage"
          },
          "memory": {
            "description": "Memory usage info.",
            "$ref": "#/components/schemas/process.global.NodeJS.MemoryUsage"
          }
        },
        "nullable": false,
        "required": [
          "cpu",
          "memory"
        ],
        "description": "Performance information of the backend server."
      },
      "process.global.NodeJS.CpuUsage": {
        "type": "object",
        "properties": {
          "user": {
            "description": "",
            "type": "number",
            "nullable": false
          },
          "system": {
            "description": "",
            "type": "number",
            "nullable": false
          }
        },
        "nullable": false,
        "required": [
          "user",
          "system"
        ],
        "description": ""
      },
      "process.global.NodeJS.MemoryUsage": {
        "type": "object",
        "properties": {
          "rss": {
            "description": "",
            "type": "number",
            "nullable": false
          },
          "heapTotal": {
            "description": "",
            "type": "number",
            "nullable": false
          },
          "heapUsed": {
            "description": "",
            "type": "number",
            "nullable": false
          },
          "external": {
            "description": "",
            "type": "number",
            "nullable": false
          },
          "arrayBuffers": {
            "description": "",
            "type": "number",
            "nullable": false
          }
        },
        "nullable": false,
        "required": [
          "rss",
          "heapTotal",
          "heapUsed",
          "external",
          "arrayBuffers"
        ],
        "description": ""
      },
      "ISaleInquiry-lt-Content-gt-.o2": {
        "type": "object",
        "properties": {
          "writer": {
            "description": "Name of the writer.",
            "type": "string",
            "nullable": false
          },
          "answer": {
            "description": "Formal answer from the seller.",
            "$ref": "#/components/schemas/ISaleArticle-lt-ISaleArticle.IContent-gt-"
          },
          "id": {
            "description": "Primary Key.",
            "type": "number",
            "nullable": false
          },
          "hit": {
            "description": "Hit count.\n\nHow many consumers had read.",
            "type": "number",
            "nullable": false
          },
          "contents": {
            "description": "List of contents.\n\nWhen the article writer tries to modify content, it would not modify the article\ncontent but would be accumulated. Therefore, all of the people can read how\nthe content has been changed.",
            "type": "array",
            "items": {},
            "nullable": false
          },
          "created_at": {
            "description": "Creation time.",
            "type": "string",
            "nullable": false
          }
        },
        "nullable": false,
        "required": [
          "writer",
          "answer",
          "id",
          "hit",
          "contents",
          "created_at"
        ],
        "description": "Inquiry article.\n\nSub-type of article and super-type of question and answer."
      },
      "ISeller": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Primary key.",
            "type": "number",
            "nullable": false
          },
          "email": {
            "description": "Email address.",
            "type": "string",
            "nullable": false
          },
          "name": {
            "description": "Name of the seller.",
            "type": "string",
            "nullable": false
          },
          "mobile": {
            "description": "Mobile number of the seller.",
            "type": "string",
            "nullable": false
          },
          "company": {
            "description": "Belonged company name.",
            "type": "string",
            "nullable": false
          }
        },
        "nullable": false,
        "required": [
          "id",
          "email",
          "name",
          "mobile",
          "company"
        ],
        "description": "Seller information."
      }
    }
  }
}