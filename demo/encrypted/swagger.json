{
  "openapi": "3.0.1",
  "servers": [
    {
      "url": "https://github.com/samchon/nestia",
      "description": "insert your server url"
    }
  ],
  "info": {
    "version": "0.1.0",
    "title": "Generated by nestia - https://github.com/samchon/nestia"
  },
  "paths": {
    "/sellers/authenticate/join": {
      "post": {
        "tags": [],
        "summary": "encrypted",
        "parameters": [],
        "requestBody": {
          "description": "## Warning\nRequest body must be encrypted.\n\nThe request body data would be encrypted as \"AES-128(256) / CBC mode / PKCS#5 Padding / Base64 Encoding\", through the [EncryptedBody](https://github.com/samchon/nestia-helper#encryptedbody) component.\n\nTherefore, just utilize this swagger editor only for referencing. If you need to call the real API, using [SDK](https://github.com/samchon/nestia#software-development-kit) would be much better.\n\n-----------------\n\nInformation of yours",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISeller.IJoin"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "## Warning\nResponse data have been encrypted.\n\nThe response body data would be encrypted as \"AES-128(256) / CBC mode / PKCS#5 Padding / Base64 Encoding\", through the [EncryptedRoute.P.ost](https://github.com/samchon/nestia-helper#encryptedroute) component.\n\nTherefore, just utilize this swagger editor only for referencing. If you need to call the real API, using [SDK](https://github.com/samchon/nestia#software-development-kit) would be much better.\n\n-----------------\n\nInformation of newly joined seller",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISeller"
                }
              }
            }
          }
        },
        "description": "Join as a seller."
      }
    },
    "/sellers/authenticate/login": {
      "post": {
        "tags": [],
        "summary": "encrypted",
        "parameters": [],
        "requestBody": {
          "description": "## Warning\nRequest body must be encrypted.\n\nThe request body data would be encrypted as \"AES-128(256) / CBC mode / PKCS#5 Padding / Base64 Encoding\", through the [EncryptedBody](https://github.com/samchon/nestia-helper#encryptedbody) component.\n\nTherefore, just utilize this swagger editor only for referencing. If you need to call the real API, using [SDK](https://github.com/samchon/nestia#software-development-kit) would be much better.\n\n-----------------\n\nEmail and password",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISeller.ILogin"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "## Warning\nResponse data have been encrypted.\n\nThe response body data would be encrypted as \"AES-128(256) / CBC mode / PKCS#5 Padding / Base64 Encoding\", through the [EncryptedRoute.P.ost](https://github.com/samchon/nestia-helper#encryptedroute) component.\n\nTherefore, just utilize this swagger editor only for referencing. If you need to call the real API, using [SDK](https://github.com/samchon/nestia#software-development-kit) would be much better.\n\n-----------------\n\nInformation of the seller",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISeller"
                }
              }
            }
          }
        },
        "description": "Log-in as a seller."
      }
    },
    "/sellers/authenticate/password/change": {
      "patch": {
        "tags": [],
        "summary": "encrypted",
        "parameters": [],
        "requestBody": {
          "description": "## Warning\nRequest body must be encrypted.\n\nThe request body data would be encrypted as \"AES-128(256) / CBC mode / PKCS#5 Padding / Base64 Encoding\", through the [EncryptedBody](https://github.com/samchon/nestia-helper#encryptedbody) component.\n\nTherefore, just utilize this swagger editor only for referencing. If you need to call the real API, using [SDK](https://github.com/samchon/nestia#software-development-kit) would be much better.\n\n-----------------\n\nOld and new passwords",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISeller.IChangePassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Empty object"
          }
        },
        "description": "Change password."
      }
    },
    "/sellers/authenticate/exit": {
      "delete": {
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "description": "Erase the seller by itself."
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    },
    "schemas": {
      "ISeller.IJoin": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": false,
            "x-tson-required": true
          },
          "password": {
            "type": "string",
            "nullable": false,
            "x-tson-required": true
          },
          "name": {
            "type": "string",
            "nullable": false,
            "x-tson-required": true
          },
          "mobile": {
            "type": "string",
            "nullable": false,
            "x-tson-required": true
          },
          "company": {
            "type": "string",
            "nullable": false,
            "x-tson-required": true
          }
        },
        "nullable": false,
        "required": [
          "email",
          "password",
          "name",
          "mobile",
          "company"
        ],
        "x-tson_jsDocTags": []
      },
      "ISeller": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "nullable": false,
            "description": "Primary key.",
            "x-tson-required": true
          },
          "email": {
            "type": "string",
            "nullable": false,
            "description": "Email address.",
            "x-tson-required": true
          },
          "name": {
            "type": "string",
            "nullable": false,
            "description": "Name of the seller.",
            "x-tson-required": true
          },
          "mobile": {
            "type": "string",
            "nullable": false,
            "description": "Mobile number of the seller.",
            "x-tson-required": true
          },
          "company": {
            "type": "string",
            "nullable": false,
            "description": "Belonged company name.",
            "x-tson-required": true
          },
          "created_at": {
            "type": "string",
            "nullable": false,
            "description": "Joined time.",
            "x-tson-required": true
          }
        },
        "nullable": false,
        "required": [
          "id",
          "email",
          "name",
          "mobile",
          "company",
          "created_at"
        ],
        "description": "Seller information.",
        "x-tson_jsDocTags": [
          {
            "name": "author",
            "text": [
              {
                "text": "Jeongho Nam - https://github.com/samchon",
                "kind": "text"
              }
            ]
          }
        ]
      },
      "ISeller.ILogin": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": false,
            "x-tson-required": true
          },
          "password": {
            "type": "string",
            "nullable": false,
            "x-tson-required": true
          }
        },
        "nullable": false,
        "required": [
          "email",
          "password"
        ],
        "x-tson_jsDocTags": []
      },
      "ISeller.IChangePassword": {
        "type": "object",
        "properties": {
          "old_password": {
            "type": "string",
            "nullable": false,
            "x-tson-required": true
          },
          "new_password": {
            "type": "string",
            "nullable": false,
            "x-tson-required": true
          }
        },
        "nullable": false,
        "required": [
          "old_password",
          "new_password"
        ],
        "x-tson_jsDocTags": []
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}